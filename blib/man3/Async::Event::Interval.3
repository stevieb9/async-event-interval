.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Async::Event::Interval 3"
.TH Async::Event::Interval 3 "2016-09-24" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Async::Event::Interval \- Extremely simple timed asynchronous events
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
A simple event. Multiple events can be simultaneously used. For an example using
an event that can share data with the main application, see \*(L"\s-1EXAMPLES\*(R"\s0.
.PP
.Vb 1
\&    use Async::Event::Interval;
\&
\&    my $event
\&        = Async::Event::Interval\->new(1.5, \e&callback);
\&
\&    $event\->start;
\&
\&    for (1..10){
\&        print "$_: in main loop\en";
\&
\&        $event\->stop if $_ == 3;
\&        $event\->start if $_ == 7;
\&
\&        sleep 1;
\&    }
\&
\&    sub callback {
\&        print "timed event callback\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Very basic implementation of asynchronous events that are triggered by a timed
interval.
.PP
Variables are not shared between the main application and the event. To do that,
you'll need to use some form of memory sharing, such as IPC::Shareable. See
\&\*(L"\s-1EXAMPLES\*(R"\s0 for an example. At this time, there is no real parameter passing or
ability to return values. As I said... basic.
.PP
Each event is simply a separate forked process, which runs in a while loop.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "new($delay, $callback)"
.el .SS "new($delay, \f(CW$callback\fP)"
.IX Subsection "new($delay, $callback)"
Returns a new \f(CW\*(C`Async::Event::Interval\*(C'\fR object. Does not create the event. Use
\&\f(CW\*(C`start\*(C'\fR for that.
.PP
Parameters:
.PP
.Vb 1
\&    $delay
.Ve
.PP
Mandatory: The interval on which to trigger your event callback, in seconds.
Represent partial seconds as a floating point number.
.PP
.Vb 1
\&    $callback
.Ve
.PP
Mandatory: A reference to a subroutine that will be called every time the
interval expires.
.SS "start"
.IX Subsection "start"
Starts the event timer. Each time the interval is reached, the event callback
is executed.
.SS "stop"
.IX Subsection "stop"
Stops the event from being executed.
.SS "restart"
.IX Subsection "restart"
Alias for \f(CW\*(C`start()\*(C'\fR. Re-starts a \f(CW\*(C`stop()\*(C'\fRped event.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
A timed event where the event callback shares a hash reference with the main
program.
.PP
.Vb 2
\&    use Async::Event::Interval;
\&    use IPC::Shareable;
\&
\&    my $href = {a => 0, b => 1};
\&    tie $href, \*(AqIPC::Shareable\*(Aq, undef;
\&
\&    my $event
\&        = Async::Event::Interval\->new(10, \e&callback);
\&
\&    sub callback {
\&        $h\->{a}++;
\&    }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve Bertrand, \f(CW\*(C`<steveb at cpan.org>\*(C'\fR
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2016 Steve Bertrand.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See <http://dev.perl.org/licenses/> for more information.
